import { useState } from 'react';
import * as Yup from 'yup';
import PropTypes from 'prop-types';
<% if (types.some(type => type.yupType === 'date')) { %>
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { DatePicker } from '@mui/x-date-pickers';
<% } %>
<% if (types.some(type => type.type === 'text' || type.type === 'multi-select')) { %>
import { TextField } from '@mui/material';
<% } %>
<% if (types.some(type => type.type === 'multi-select')) { %>
import { Autocomplete } from '@mui/material';
<% } %>
<% if (types.some(type => type.type === 'select')) { %>
import { Select, MenuItem, FormControl, InputLabel } from '@mui/material';
<% } %>
<% if (types.some(type => type.type === 'select')) { %>
import { Typography } from '@mui/material';
<% } %>
import { Button, Box } from '@mui/material';

const <%= componentName %> = ({
    defaultValues,
    options,
}) => {
    const [formData, setFormData] = useState({
      <% types.forEach(type => { 
         if (!type.primaryKey) { %>
        <%= type.name %>: defaultValues.<%= type.name %> !== undefined
          ? defaultValues.<%= type.name %>
          : <%- (type.yupType === 'string' ? "''" 
              : type.yupType === 'number' ? "0"
              : type.yupType === 'date' ? "new Date()"
              : type.yupType === 'array' ? "[]" 
              : type.yupType === 'object' ? "null"
              : "''") %>,
      <% } }) -%>
    });

    const [errors, setErrors] = useState({});

    // Define Yup validation schema
    const validationSchema = Yup.object().shape({
        <% types.forEach(type => { 
           if (!type.primaryKey) { %>
        <%= type.name %>: Yup.<%= type.yupType -%>()
            <% if (type.required) { %>.required('<%= type.label %> is required')<% } -%>
            <% if (type.minLength) { %>.min(<%= type.minLength %>, '<%= type.label %> must be at least <%= type.minLength %> characters')<% } -%>
            <% if (type.maxLength) { %>.max(<%= type.maxLength %>, '<%= type.label %> must be at most <%= type.maxLength %> characters')<% } -%>
            <% if (type.min) { %>.min(<%= type.min %>, '<%= type.label %> must be greater than <%= type.min %>')<% } -%>
            <% if (type.max) { %>.max(<%= type.max %>, '<%= type.label %> must be less than <%= type.max %>')<% } -%>,
        <% } }) -%>
    });

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData({
            ...formData,
            [name]: value
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        try {
            // Validate form data
            await validationSchema.validate(formData, { abortEarly: false });
            setErrors({});
            // Perform CRUD operation after successful validation
            console.log('Form data:', formData);
        } catch (validationErrors) {
            const formattedErrors = {};
            validationErrors.inner.forEach(error => {
                formattedErrors[error.path] = error.message;
            });
            setErrors(formattedErrors);
        }
    };

    return (
        <% if (types.some(type => type.yupType === 'date')) { %>
        <LocalizationProvider dateAdapter={AdapterDateFns}>
        <% } %>
        <Box component="form" onSubmit={handleSubmit} sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
            <% types.forEach(type => { 
               if (!type.primaryKey) { %>
                <% if (type.type === 'multi-select') { %>
                  <Autocomplete
                    multiple
                    options={options['<%= type.name %>'] || []} // Use options for multi-select
                    getOptionLabel={(option) => option.label}
                    onChange={(event, newValue) => {
                      setFormData({ ...formData, <%= type.name %>: newValue });
                    }}
                    value={formData.<%= type.name %>}
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        label="<%= type.label %>"
                        error={!!errors.<%= type.name %>}
                        helperText={errors.<%= type.name %> || ''}
                        variant="outlined"
                      />
                    )}
                  />
                <% } else if (type.type === 'select') { %>
                  <FormControl fullWidth variant="outlined" error={!!errors.<%= type.name %>}>
                    <InputLabel><%= type.label %></InputLabel>
                    <Select
                      label="<%= type.label %>"
                      name="<%= type.name %>"
                      value={formData.<%= type.name %>}
                      onChange={handleChange}
                      <% if (type.required) { %>required<% } %> // Mark Select as required if necessary
                    >
                      {(options['<%= type.name %>'] || []).map(option => (
                        <MenuItem key={option.key} value={option.value}>
                          {option.label}
                        </MenuItem>
                      ))}
                    </Select>
                    <Typography variant="caption" color="error">{errors.<%= type.name %> || ''}</Typography>
                  </FormControl>
                <% } else if (type.yupType === 'date') { %>
                  <DatePicker
                    label="<%= type.label %>"
                    value={formData.<%= type.name %>}
                    onChange={(newValue) => {
                      setFormData({ ...formData, <%= type.name %>: newValue });
                    }}
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        error={!!errors.<%= type.name %>}
                        helperText={errors.<%= type.name %> || ''}
                        variant="outlined"
                        fullWidth
                        <% if (type.required) { %>required<% } %>
                      />
                    )}
                  />
                <% } else { %>
                  <TextField
                    fullWidth
                    label="<%= type.label %>"
                    name="<%= type.name %>"
                    type="<%= type.type %>"
                    value={formData.<%= type.name %>}
                    onChange={handleChange}
                    error={!!errors.<%= type.name %>}
                    helperText={errors.<%= type.name %> || ''}
                    variant="outlined"
                    <% if (type.required) { %>required<% } %> // Mark TextField as required if necessary
                  />
                <% } %>
              <% } }) %>
            <Button type="submit" variant="contained" color="primary">Submit</Button>
        </Box>
        <% if (types.some(type => type.yupType === 'date')) { %>
        </LocalizationProvider>
        <% } %>
    );
};

export default <%= componentName %>;

// Define PropTypes for the component
<%= componentName %>.propTypes = {
    defaultValues: PropTypes.shape({
        <% types.forEach(type => { 
           if (!type.primaryKey) { %>
        <%= type.name %>: PropTypes.<%= (type.yupType === 'string' ? 'string' 
            : type.yupType === 'number' ? 'number'
            : type.yupType === 'date' ? 'instanceOf(Date)'
            : type.yupType === 'array' ? 'array'
            : type.yupType === 'object' ? 'object'
            : 'any') %><%= type.required ? '.isRequired' : '' %>,
        <% } }) -%>
    }),
    options: PropTypes.objectOf(PropTypes.arrayOf(
        PropTypes.shape({
            label: PropTypes.string.isRequired,
            value: PropTypes.any.isRequired
        })
    )).isRequired
};
